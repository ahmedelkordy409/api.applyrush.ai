#!/bin/bash

# JobHire.AI Backend Startup Script
echo "üöÄ Starting JobHire.AI Backend Services..."

# Check if .env exists
if [ ! -f .env ]; then
    echo "‚ùå .env file not found! Please copy from .env.example and configure your API keys."
    exit 1
fi

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi

# Start services with Docker Compose
echo "üì¶ Starting services with Docker Compose..."
docker-compose up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to start..."
sleep 10

# Check service health
echo "üè• Checking service health..."

# Check backend
if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ Backend API is running at http://localhost:8000"
    echo "üìñ API Documentation: http://localhost:8000/docs"
else
    echo "‚ùå Backend API is not responding"
fi

# Check Flower (Celery monitoring)
if curl -s http://localhost:5555 > /dev/null; then
    echo "‚úÖ Flower (Celery monitoring) is running at http://localhost:5555"
else
    echo "‚ùå Flower is not responding"
fi

# Check database connection
echo "üóÑÔ∏è  Checking database connection..."
if docker-compose exec -T backend python -c "
import asyncio
from app.core.database import check_database_health

async def check():
    healthy = await check_database_health()
    print('‚úÖ Database connection: OK' if healthy else '‚ùå Database connection: FAILED')

asyncio.run(check())
" 2>/dev/null; then
    echo "Database check completed"
else
    echo "‚ö†Ô∏è  Could not check database connection"
fi

echo ""
echo "üéâ JobHire.AI Backend is ready!"
echo ""
echo "üìã Service URLs:"
echo "   ‚Ä¢ Backend API:        http://localhost:8000"
echo "   ‚Ä¢ API Documentation:  http://localhost:8000/docs"
echo "   ‚Ä¢ Celery Monitoring:  http://localhost:5555"
echo "   ‚Ä¢ Database:          localhost:5432"
echo "   ‚Ä¢ Redis:             localhost:6379"
echo ""
echo "üìä To check logs:"
echo "   docker-compose logs -f backend"
echo "   docker-compose logs -f celery-worker"
echo ""
echo "üõë To stop services:"
echo "   docker-compose down"
echo ""
echo "üîß Next steps:"
echo "   1. Update your Next.js app to use: http://localhost:8000"
echo "   2. Test the API at: http://localhost:8000/docs"
echo "   3. Import the job-matching-dashboard component"
echo ""